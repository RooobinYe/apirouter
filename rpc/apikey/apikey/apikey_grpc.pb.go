// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: apikey.proto

package apikey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiKey_GenerateApiKey_FullMethodName  = "/apikey.ApiKey/GenerateApiKey"
	ApiKey_ListApiKeys_FullMethodName     = "/apikey.ApiKey/ListApiKeys"
	ApiKey_GetApiKey_FullMethodName       = "/apikey.ApiKey/GetApiKey"
	ApiKey_DeleteApiKey_FullMethodName    = "/apikey.ApiKey/DeleteApiKey"
	ApiKey_ValidateKey_FullMethodName     = "/apikey.ApiKey/ValidateKey"
	ApiKey_UpdateKeyStatus_FullMethodName = "/apikey.ApiKey/UpdateKeyStatus"
)

// ApiKeyClient is the client API for ApiKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==================== 服务定义 ====================
type ApiKeyClient interface {
	// 生成API密钥
	GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error)
	// 获取API密钥列表
	ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error)
	// 获取API密钥详情
	GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error)
	// 删除API密钥
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
	// 验证API密钥（供其他服务调用）
	ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error)
	// 更新API密钥状态（内部服务使用）
	UpdateKeyStatus(ctx context.Context, in *UpdateKeyStatusRequest, opts ...grpc.CallOption) (*UpdateKeyStatusResponse, error)
}

type apiKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyClient(cc grpc.ClientConnInterface) ApiKeyClient {
	return &apiKeyClient{cc}
}

func (c *apiKeyClient) GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKey_GenerateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyClient) ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApiKeysResponse)
	err := c.cc.Invoke(ctx, ApiKey_ListApiKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyClient) GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKey_GetApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, ApiKey_DeleteApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyClient) ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateKeyResponse)
	err := c.cc.Invoke(ctx, ApiKey_ValidateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyClient) UpdateKeyStatus(ctx context.Context, in *UpdateKeyStatusRequest, opts ...grpc.CallOption) (*UpdateKeyStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeyStatusResponse)
	err := c.cc.Invoke(ctx, ApiKey_UpdateKeyStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServer is the server API for ApiKey service.
// All implementations must embed UnimplementedApiKeyServer
// for forward compatibility.
//
// ==================== 服务定义 ====================
type ApiKeyServer interface {
	// 生成API密钥
	GenerateApiKey(context.Context, *GenerateApiKeyRequest) (*GenerateApiKeyResponse, error)
	// 获取API密钥列表
	ListApiKeys(context.Context, *ListApiKeysRequest) (*ListApiKeysResponse, error)
	// 获取API密钥详情
	GetApiKey(context.Context, *GetApiKeyRequest) (*GetApiKeyResponse, error)
	// 删除API密钥
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
	// 验证API密钥（供其他服务调用）
	ValidateKey(context.Context, *ValidateKeyRequest) (*ValidateKeyResponse, error)
	// 更新API密钥状态（内部服务使用）
	UpdateKeyStatus(context.Context, *UpdateKeyStatusRequest) (*UpdateKeyStatusResponse, error)
	mustEmbedUnimplementedApiKeyServer()
}

// UnimplementedApiKeyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiKeyServer struct{}

func (UnimplementedApiKeyServer) GenerateApiKey(context.Context, *GenerateApiKeyRequest) (*GenerateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApiKey not implemented")
}
func (UnimplementedApiKeyServer) ListApiKeys(context.Context, *ListApiKeysRequest) (*ListApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKeys not implemented")
}
func (UnimplementedApiKeyServer) GetApiKey(context.Context, *GetApiKeyRequest) (*GetApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKey not implemented")
}
func (UnimplementedApiKeyServer) DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedApiKeyServer) ValidateKey(context.Context, *ValidateKeyRequest) (*ValidateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateKey not implemented")
}
func (UnimplementedApiKeyServer) UpdateKeyStatus(context.Context, *UpdateKeyStatusRequest) (*UpdateKeyStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyStatus not implemented")
}
func (UnimplementedApiKeyServer) mustEmbedUnimplementedApiKeyServer() {}
func (UnimplementedApiKeyServer) testEmbeddedByValue()                {}

// UnsafeApiKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeyServer will
// result in compilation errors.
type UnsafeApiKeyServer interface {
	mustEmbedUnimplementedApiKeyServer()
}

func RegisterApiKeyServer(s grpc.ServiceRegistrar, srv ApiKeyServer) {
	// If the following call pancis, it indicates UnimplementedApiKeyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiKey_ServiceDesc, srv)
}

func _ApiKey_GenerateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).GenerateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_GenerateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).GenerateApiKey(ctx, req.(*GenerateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKey_ListApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).ListApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_ListApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).ListApiKeys(ctx, req.(*ListApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKey_GetApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).GetApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_GetApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).GetApiKey(ctx, req.(*GetApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKey_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_DeleteApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKey_ValidateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).ValidateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_ValidateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).ValidateKey(ctx, req.(*ValidateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKey_UpdateKeyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServer).UpdateKeyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiKey_UpdateKeyStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServer).UpdateKeyStatus(ctx, req.(*UpdateKeyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiKey_ServiceDesc is the grpc.ServiceDesc for ApiKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apikey.ApiKey",
	HandlerType: (*ApiKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateApiKey",
			Handler:    _ApiKey_GenerateApiKey_Handler,
		},
		{
			MethodName: "ListApiKeys",
			Handler:    _ApiKey_ListApiKeys_Handler,
		},
		{
			MethodName: "GetApiKey",
			Handler:    _ApiKey_GetApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _ApiKey_DeleteApiKey_Handler,
		},
		{
			MethodName: "ValidateKey",
			Handler:    _ApiKey_ValidateKey_Handler,
		},
		{
			MethodName: "UpdateKeyStatus",
			Handler:    _ApiKey_UpdateKeyStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apikey.proto",
}
