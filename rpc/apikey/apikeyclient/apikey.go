// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: apikey.proto

package apikeyclient

import (
	"context"

	"apirouter/rpc/apikey/apikey"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiKeyInfo              = apikey.ApiKeyInfo
	ApiKeyListData          = apikey.ApiKeyListData
	DeleteApiKeyRequest     = apikey.DeleteApiKeyRequest
	DeleteApiKeyResponse    = apikey.DeleteApiKeyResponse
	GenerateApiKeyRequest   = apikey.GenerateApiKeyRequest
	GenerateApiKeyResponse  = apikey.GenerateApiKeyResponse
	GetApiKeyRequest        = apikey.GetApiKeyRequest
	GetApiKeyResponse       = apikey.GetApiKeyResponse
	KeyValidationData       = apikey.KeyValidationData
	ListApiKeysRequest      = apikey.ListApiKeysRequest
	ListApiKeysResponse     = apikey.ListApiKeysResponse
	SuccessData             = apikey.SuccessData
	UpdateKeyStatusRequest  = apikey.UpdateKeyStatusRequest
	UpdateKeyStatusResponse = apikey.UpdateKeyStatusResponse
	ValidateKeyRequest      = apikey.ValidateKeyRequest
	ValidateKeyResponse     = apikey.ValidateKeyResponse

	ApiKey interface {
		// 生成API密钥
		GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error)
		// 获取API密钥列表
		ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error)
		// 获取API密钥详情
		GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error)
		// 删除API密钥
		DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
		// 验证API密钥（供其他服务调用）
		ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error)
		// 更新API密钥状态（内部服务使用）
		UpdateKeyStatus(ctx context.Context, in *UpdateKeyStatusRequest, opts ...grpc.CallOption) (*UpdateKeyStatusResponse, error)
	}

	defaultApiKey struct {
		cli zrpc.Client
	}
)

func NewApiKey(cli zrpc.Client) ApiKey {
	return &defaultApiKey{
		cli: cli,
	}
}

// 生成API密钥
func (m *defaultApiKey) GenerateApiKey(ctx context.Context, in *GenerateApiKeyRequest, opts ...grpc.CallOption) (*GenerateApiKeyResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.GenerateApiKey(ctx, in, opts...)
}

// 获取API密钥列表
func (m *defaultApiKey) ListApiKeys(ctx context.Context, in *ListApiKeysRequest, opts ...grpc.CallOption) (*ListApiKeysResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.ListApiKeys(ctx, in, opts...)
}

// 获取API密钥详情
func (m *defaultApiKey) GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.GetApiKey(ctx, in, opts...)
}

// 删除API密钥
func (m *defaultApiKey) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.DeleteApiKey(ctx, in, opts...)
}

// 验证API密钥（供其他服务调用）
func (m *defaultApiKey) ValidateKey(ctx context.Context, in *ValidateKeyRequest, opts ...grpc.CallOption) (*ValidateKeyResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.ValidateKey(ctx, in, opts...)
}

// 更新API密钥状态（内部服务使用）
func (m *defaultApiKey) UpdateKeyStatus(ctx context.Context, in *UpdateKeyStatusRequest, opts ...grpc.CallOption) (*UpdateKeyStatusResponse, error) {
	client := apikey.NewApiKeyClient(m.cli.Conn())
	return client.UpdateKeyStatus(ctx, in, opts...)
}
