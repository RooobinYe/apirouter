// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: openai.proto

package openaiclient

import (
	"context"

	"apirouter/rpc/openai/openai"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiKeyValidationData   = openai.ApiKeyValidationData
	OpenAIChatChoice       = openai.OpenAIChatChoice
	OpenAIChatData         = openai.OpenAIChatData
	OpenAIChatMessage      = openai.OpenAIChatMessage
	OpenAIChatRequest      = openai.OpenAIChatRequest
	OpenAIChatResponse     = openai.OpenAIChatResponse
	OpenAIUsage            = openai.OpenAIUsage
	ValidateApiKeyRequest  = openai.ValidateApiKeyRequest
	ValidateApiKeyResponse = openai.ValidateApiKeyResponse

	OpenAI interface {
		// OpenAI Chat 聊天接口
		ChatCompletions(ctx context.Context, in *OpenAIChatRequest, opts ...grpc.CallOption) (*OpenAIChatResponse, error)
		// 验证API密钥（供ApiKeyMiddleware使用）
		ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
	}

	defaultOpenAI struct {
		cli zrpc.Client
	}
)

func NewOpenAI(cli zrpc.Client) OpenAI {
	return &defaultOpenAI{
		cli: cli,
	}
}

// OpenAI Chat 聊天接口
func (m *defaultOpenAI) ChatCompletions(ctx context.Context, in *OpenAIChatRequest, opts ...grpc.CallOption) (*OpenAIChatResponse, error) {
	client := openai.NewOpenAIClient(m.cli.Conn())
	return client.ChatCompletions(ctx, in, opts...)
}

// 验证API密钥（供ApiKeyMiddleware使用）
func (m *defaultOpenAI) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	client := openai.NewOpenAIClient(m.cli.Conn())
	return client.ValidateApiKey(ctx, in, opts...)
}
