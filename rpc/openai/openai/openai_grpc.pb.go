// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: openai.proto

package openai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenAI_ChatCompletions_FullMethodName = "/openai.OpenAI/ChatCompletions"
	OpenAI_ValidateApiKey_FullMethodName  = "/openai.OpenAI/ValidateApiKey"
)

// OpenAIClient is the client API for OpenAI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ==================== 服务定义 ====================
type OpenAIClient interface {
	// OpenAI Chat 聊天接口
	ChatCompletions(ctx context.Context, in *OpenAIChatRequest, opts ...grpc.CallOption) (*OpenAIChatResponse, error)
	// 验证API密钥（供ApiKeyMiddleware使用）
	ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
}

type openAIClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenAIClient(cc grpc.ClientConnInterface) OpenAIClient {
	return &openAIClient{cc}
}

func (c *openAIClient) ChatCompletions(ctx context.Context, in *OpenAIChatRequest, opts ...grpc.CallOption) (*OpenAIChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenAIChatResponse)
	err := c.cc.Invoke(ctx, OpenAI_ChatCompletions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAIClient) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateApiKeyResponse)
	err := c.cc.Invoke(ctx, OpenAI_ValidateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenAIServer is the server API for OpenAI service.
// All implementations must embed UnimplementedOpenAIServer
// for forward compatibility.
//
// ==================== 服务定义 ====================
type OpenAIServer interface {
	// OpenAI Chat 聊天接口
	ChatCompletions(context.Context, *OpenAIChatRequest) (*OpenAIChatResponse, error)
	// 验证API密钥（供ApiKeyMiddleware使用）
	ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error)
	mustEmbedUnimplementedOpenAIServer()
}

// UnimplementedOpenAIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenAIServer struct{}

func (UnimplementedOpenAIServer) ChatCompletions(context.Context, *OpenAIChatRequest) (*OpenAIChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletions not implemented")
}
func (UnimplementedOpenAIServer) ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApiKey not implemented")
}
func (UnimplementedOpenAIServer) mustEmbedUnimplementedOpenAIServer() {}
func (UnimplementedOpenAIServer) testEmbeddedByValue()                {}

// UnsafeOpenAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenAIServer will
// result in compilation errors.
type UnsafeOpenAIServer interface {
	mustEmbedUnimplementedOpenAIServer()
}

func RegisterOpenAIServer(s grpc.ServiceRegistrar, srv OpenAIServer) {
	// If the following call pancis, it indicates UnimplementedOpenAIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenAI_ServiceDesc, srv)
}

func _OpenAI_ChatCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAIChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAIServer).ChatCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAI_ChatCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAIServer).ChatCompletions(ctx, req.(*OpenAIChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenAI_ValidateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenAIServer).ValidateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenAI_ValidateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenAIServer).ValidateApiKey(ctx, req.(*ValidateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenAI_ServiceDesc is the grpc.ServiceDesc for OpenAI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenAI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openai.OpenAI",
	HandlerType: (*OpenAIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletions",
			Handler:    _OpenAI_ChatCompletions_Handler,
		},
		{
			MethodName: "ValidateApiKey",
			Handler:    _OpenAI_ValidateApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openai.proto",
}
