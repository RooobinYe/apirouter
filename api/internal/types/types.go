// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type ApiKeyInfo struct {
	Id        string `json:"id"` // UUID: "550e8400-e29b-41d4-a716-446655440000"
	Name      string `json:"name"`
	ApiKey    string `json:"api_key"`
	CreatedAt int64  `json:"created_at"`
	Status    string `json:"status"`
}

type ApiKeyListData struct {
	ApiKeys []ApiKeyInfo `json:"api_keys"`
	Total   int64        `json:"total"`
}

type BaseResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type DeleteApiKeyReq struct {
	Id string `path:"id"`
}

type DeleteApiKeyResp struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    SuccessData `json:"data,omitempty"`
}

type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Error   string `json:"error,omitempty"`
}

type GenerateApiKeyReq struct {
	Name        string `json:"name" validate:"required,min=1"`
	Description string `json:"description"`
	ExpiresAt   int64  `json:"expires_at"`
}

type GenerateApiKeyResp struct {
	Code    int        `json:"code"`
	Message string     `json:"message"`
	Data    ApiKeyInfo `json:"data,omitempty"`
}

type GetApiKeyReq struct {
	Id string `path:"id"`
}

type GetApiKeyResp struct {
	Code    int        `json:"code"`
	Message string     `json:"message"`
	Data    ApiKeyInfo `json:"data,omitempty"`
}

type ListApiKeysReq struct {
	Page     int `form:"page,optional,default=1"`
	PageSize int `form:"page_size,optional,default=10"`
}

type ListApiKeysResp struct {
	Code    int            `json:"code"`
	Message string         `json:"message"`
	Data    ApiKeyListData `json:"data,omitempty"`
}

type LoginData struct {
	UserId      int64  `json:"user_id"`
	Username    string `json:"username"`
	Mail        string `json:"mail"`
	AccessToken string `json:"access_token"`
}

type LoginReq struct {
	Username string `json:"username" validate:"required"`
	Password string `json:"password" validate:"required"`
}

type LoginResp struct {
	Code    int       `json:"code"`
	Message string    `json:"message"`
	Data    LoginData `json:"data,omitempty"`
}

type OpenAIChatChoice struct {
	Index        int               `json:"index"`
	Message      OpenAIChatMessage `json:"message"`
	FinishReason string            `json:"finish_reason"`
}

type OpenAIChatMessage struct {
	Role    string `json:"role"` // system, user, assistant
	Content string `json:"content"`
	Name    string `json:"name,omitempty"`
}

type OpenAIChatReq struct {
	Model            string              `json:"model"`
	Messages         []OpenAIChatMessage `json:"messages"`
	Temperature      float64             `json:"temperature,omitempty"`
	MaxTokens        int                 `json:"max_tokens,omitempty"`
	TopP             float64             `json:"top_p,omitempty"`
	FrequencyPenalty float64             `json:"frequency_penalty,omitempty"`
	PresencePenalty  float64             `json:"presence_penalty,omitempty"`
	Stop             []string            `json:"stop,omitempty"`
	Stream           bool                `json:"stream,omitempty"`
	User             string              `json:"user,omitempty"`
}

type OpenAIChatResp struct {
	Id      string             `json:"id"`
	Object  string             `json:"object"`
	Created int64              `json:"created"`
	Model   string             `json:"model"`
	Choices []OpenAIChatChoice `json:"choices"`
	Usage   OpenAIUsage        `json:"usage"`
}

type OpenAIUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

type RegisterData struct {
	UserId   int64  `json:"user_id"`
	Username string `json:"username"`
	Mail     string `json:"mail"`
}

type RegisterReq struct {
	Username string `json:"username" validate:"required,min=1"`
	Password string `json:"password" validate:"required,min=1"`
	Email    string `json:"email" validate:"required,email"`
}

type RegisterResp struct {
	Code    int          `json:"code"`
	Message string       `json:"message"`
	Data    RegisterData `json:"data,omitempty"`
}

type SuccessData struct {
	Message string `json:"message"`
}
