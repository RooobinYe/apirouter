syntax = "proto3";

package user;
option go_package="./user";

// ==================== 请求和响应消息定义 ====================

// 用户注册请求
message RegisterRequest {
  string username = 1;
  string password = 2;
  string email = 3;
}

// 用户注册响应
message RegisterResponse {
  int32 code = 1;
  string message = 2;
  RegisterData data = 3;
}

// 注册响应数据
message RegisterData {
  int64 user_id = 1;
  string username = 2;
  string mail = 3;
}

// 用户登录请求
message LoginRequest {
  string username = 1;
  string password = 2;
}

// 用户登录响应
message LoginResponse {
  int32 code = 1;
  string message = 2;
  LoginData data = 3;
}

// 登录响应数据
message LoginData {
  int64 user_id = 1;
  string username = 2;
  string mail = 3;
  string access_token = 4;
}

// Token验证请求
message ValidateTokenRequest {
  string access_token = 1;
}

// Token验证响应
message ValidateTokenResponse {
  int32 code = 1;
  string message = 2;
  TokenData data = 3;
}

// Token验证数据
message TokenData {
  bool valid = 1;
  int64 user_id = 2;
  string username = 3;
  int64 expires_at = 4;
}

// 获取用户信息请求（通过user_id）
message GetUserInfoRequest {
  int64 user_id = 1;
}

// 获取用户信息响应
message GetUserInfoResponse {
  int32 code = 1;
  string message = 2;
  UserInfo data = 3;
}

// 用户信息
message UserInfo {
  int64 user_id = 1;
  string username = 2;
  string mail = 3;
  int64 created_at = 4;
  int32 status = 5; // 1: active, 0: inactive
}

// ==================== 服务定义 ====================
service User {
  // 用户注册
  rpc Register(RegisterRequest) returns(RegisterResponse);
  
  // 用户登录
  rpc Login(LoginRequest) returns(LoginResponse);
  
  // 验证Token（供AuthMiddleware使用）
  rpc ValidateToken(ValidateTokenRequest) returns(ValidateTokenResponse);
  
  // 获取用户信息（内部服务使用）
  rpc GetUserInfo(GetUserInfoRequest) returns(GetUserInfoResponse);
}
