// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	apikeysFieldNames          = builder.RawFieldNames(&Apikeys{})
	apikeysRows                = strings.Join(apikeysFieldNames, ",")
	apikeysRowsExpectAutoSet   = strings.Join(stringx.Remove(apikeysFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	apikeysRowsWithPlaceHolder = strings.Join(stringx.Remove(apikeysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheApikeysIdPrefix     = "cache:apikeys:id:"
	cacheApikeysApiKeyPrefix = "cache:apikeys:apiKey:"
)

type (
	apikeysModel interface {
		Insert(ctx context.Context, data *Apikeys) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Apikeys, error)
		FindOneByApiKey(ctx context.Context, apiKey string) (*Apikeys, error)
		Update(ctx context.Context, data *Apikeys) error
		Delete(ctx context.Context, id string) error
	}

	defaultApikeysModel struct {
		sqlc.CachedConn
		table string
	}

	Apikeys struct {
		Id        string `db:"id"` // UUID
		UserId    int64  `db:"user_id"`
		Name      string `db:"name"`
		ApiKey    string `db:"api_key"`
		CreatedAt int64  `db:"created_at"`
		Status    string `db:"status"` // active, inactive, expired
	}
)

func newApikeysModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultApikeysModel {
	return &defaultApikeysModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`apikeys`",
	}
}

func (m *defaultApikeysModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	apikeysApiKeyKey := fmt.Sprintf("%s%v", cacheApikeysApiKeyPrefix, data.ApiKey)
	apikeysIdKey := fmt.Sprintf("%s%v", cacheApikeysIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, apikeysApiKeyKey, apikeysIdKey)
	return err
}

func (m *defaultApikeysModel) FindOne(ctx context.Context, id string) (*Apikeys, error) {
	apikeysIdKey := fmt.Sprintf("%s%v", cacheApikeysIdPrefix, id)
	var resp Apikeys
	err := m.QueryRowCtx(ctx, &resp, apikeysIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apikeysRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApikeysModel) FindOneByApiKey(ctx context.Context, apiKey string) (*Apikeys, error) {
	apikeysApiKeyKey := fmt.Sprintf("%s%v", cacheApikeysApiKeyPrefix, apiKey)
	var resp Apikeys
	err := m.QueryRowIndexCtx(ctx, &resp, apikeysApiKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `api_key` = ? limit 1", apikeysRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, apiKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApikeysModel) Insert(ctx context.Context, data *Apikeys) (sql.Result, error) {
	apikeysApiKeyKey := fmt.Sprintf("%s%v", cacheApikeysApiKeyPrefix, data.ApiKey)
	apikeysIdKey := fmt.Sprintf("%s%v", cacheApikeysIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, apikeysRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Name, data.ApiKey, data.Status)
	}, apikeysApiKeyKey, apikeysIdKey)
	return ret, err
}

func (m *defaultApikeysModel) Update(ctx context.Context, newData *Apikeys) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	apikeysApiKeyKey := fmt.Sprintf("%s%v", cacheApikeysApiKeyPrefix, data.ApiKey)
	apikeysIdKey := fmt.Sprintf("%s%v", cacheApikeysIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, apikeysRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Name, newData.ApiKey, newData.Status, newData.Id)
	}, apikeysApiKeyKey, apikeysIdKey)
	return err
}

func (m *defaultApikeysModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheApikeysIdPrefix, primary)
}

func (m *defaultApikeysModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apikeysRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultApikeysModel) tableName() string {
	return m.table
}
