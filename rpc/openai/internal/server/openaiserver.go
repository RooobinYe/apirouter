// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: openai.proto

package server

import (
	"context"

	"apirouter/rpc/openai/internal/logic"
	"apirouter/rpc/openai/internal/svc"
	"apirouter/rpc/openai/openai"
)

type OpenAIServer struct {
	svcCtx *svc.ServiceContext
	openai.UnimplementedOpenAIServer
}

func NewOpenAIServer(svcCtx *svc.ServiceContext) *OpenAIServer {
	return &OpenAIServer{
		svcCtx: svcCtx,
	}
}

// OpenAI Chat 聊天接口
func (s *OpenAIServer) ChatCompletions(ctx context.Context, in *openai.OpenAIChatRequest) (*openai.OpenAIChatResponse, error) {
	l := logic.NewChatCompletionsLogic(ctx, s.svcCtx)
	return l.ChatCompletions(in)
}

// 验证API密钥（供ApiKeyMiddleware使用）
func (s *OpenAIServer) ValidateApiKey(ctx context.Context, in *openai.ValidateApiKeyRequest) (*openai.ValidateApiKeyResponse, error) {
	l := logic.NewValidateApiKeyLogic(ctx, s.svcCtx)
	return l.ValidateApiKey(in)
}
