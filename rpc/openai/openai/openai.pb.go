// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: openai.proto

package openai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpenAI Chat 消息
type OpenAIChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"` // system, user, assistant
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenAIChatMessage) Reset() {
	*x = OpenAIChatMessage{}
	mi := &file_openai_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIChatMessage) ProtoMessage() {}

func (x *OpenAIChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIChatMessage.ProtoReflect.Descriptor instead.
func (*OpenAIChatMessage) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{0}
}

func (x *OpenAIChatMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *OpenAIChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OpenAIChatMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// OpenAI Chat 请求
type OpenAIChatRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Model            string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Messages         []*OpenAIChatMessage   `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Temperature      float64                `protobuf:"fixed64,3,opt,name=temperature,proto3" json:"temperature,omitempty"`                                   // optional
	MaxTokens        int32                  `protobuf:"varint,4,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`                       // optional
	TopP             float64                `protobuf:"fixed64,5,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`                                     // optional
	FrequencyPenalty float64                `protobuf:"fixed64,6,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"` // optional
	PresencePenalty  float64                `protobuf:"fixed64,7,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`    // optional
	Stop             []string               `protobuf:"bytes,8,rep,name=stop,proto3" json:"stop,omitempty"`                                                   // optional
	Stream           bool                   `protobuf:"varint,9,opt,name=stream,proto3" json:"stream,omitempty"`                                              // optional
	User             string                 `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`                                                  // optional
	ApiKey           string                 `protobuf:"bytes,11,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`                                // 用于验证的API密钥
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OpenAIChatRequest) Reset() {
	*x = OpenAIChatRequest{}
	mi := &file_openai_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIChatRequest) ProtoMessage() {}

func (x *OpenAIChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIChatRequest.ProtoReflect.Descriptor instead.
func (*OpenAIChatRequest) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{1}
}

func (x *OpenAIChatRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OpenAIChatRequest) GetMessages() []*OpenAIChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *OpenAIChatRequest) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *OpenAIChatRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *OpenAIChatRequest) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *OpenAIChatRequest) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *OpenAIChatRequest) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *OpenAIChatRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *OpenAIChatRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *OpenAIChatRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *OpenAIChatRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// OpenAI 使用统计
type OpenAIUsage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PromptTokens     int32                  `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens int32                  `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	TotalTokens      int32                  `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OpenAIUsage) Reset() {
	*x = OpenAIUsage{}
	mi := &file_openai_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIUsage) ProtoMessage() {}

func (x *OpenAIUsage) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIUsage.ProtoReflect.Descriptor instead.
func (*OpenAIUsage) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{2}
}

func (x *OpenAIUsage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *OpenAIUsage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *OpenAIUsage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

// OpenAI Chat 选择
type OpenAIChatChoice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Message       *OpenAIChatMessage     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FinishReason  string                 `protobuf:"bytes,3,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenAIChatChoice) Reset() {
	*x = OpenAIChatChoice{}
	mi := &file_openai_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIChatChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIChatChoice) ProtoMessage() {}

func (x *OpenAIChatChoice) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIChatChoice.ProtoReflect.Descriptor instead.
func (*OpenAIChatChoice) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{3}
}

func (x *OpenAIChatChoice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *OpenAIChatChoice) GetMessage() *OpenAIChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OpenAIChatChoice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

// OpenAI Chat 响应
type OpenAIChatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 自定义状态码，用于内部错误处理
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 自定义消息，用于内部错误处理
	Data          *OpenAIChatData        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 实际的OpenAI响应数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenAIChatResponse) Reset() {
	*x = OpenAIChatResponse{}
	mi := &file_openai_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIChatResponse) ProtoMessage() {}

func (x *OpenAIChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIChatResponse.ProtoReflect.Descriptor instead.
func (*OpenAIChatResponse) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{4}
}

func (x *OpenAIChatResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpenAIChatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpenAIChatResponse) GetData() *OpenAIChatData {
	if x != nil {
		return x.Data
	}
	return nil
}

// OpenAI Chat 数据（直接返回给客户端的格式）
type OpenAIChatData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object        string                 `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created       int64                  `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model         string                 `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Choices       []*OpenAIChatChoice    `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Usage         *OpenAIUsage           `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenAIChatData) Reset() {
	*x = OpenAIChatData{}
	mi := &file_openai_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIChatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIChatData) ProtoMessage() {}

func (x *OpenAIChatData) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIChatData.ProtoReflect.Descriptor instead.
func (*OpenAIChatData) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{5}
}

func (x *OpenAIChatData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OpenAIChatData) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *OpenAIChatData) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *OpenAIChatData) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OpenAIChatData) GetChoices() []*OpenAIChatChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *OpenAIChatData) GetUsage() *OpenAIUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// 验证API密钥请求
type ValidateApiKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateApiKeyRequest) Reset() {
	*x = ValidateApiKeyRequest{}
	mi := &file_openai_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyRequest) ProtoMessage() {}

func (x *ValidateApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyRequest.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateApiKeyRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// 验证API密钥响应
type ValidateApiKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data          *ApiKeyValidationData  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateApiKeyResponse) Reset() {
	*x = ValidateApiKeyResponse{}
	mi := &file_openai_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateApiKeyResponse) ProtoMessage() {}

func (x *ValidateApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateApiKeyResponse.ProtoReflect.Descriptor instead.
func (*ValidateApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateApiKeyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ValidateApiKeyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateApiKeyResponse) GetData() *ApiKeyValidationData {
	if x != nil {
		return x.Data
	}
	return nil
}

// API密钥验证数据
type ApiKeyValidationData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	KeyId         string                 `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`              // API密钥ID
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 密钥所属用户ID
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                         // 密钥状态
	ExpiresAt     int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // 过期时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyValidationData) Reset() {
	*x = ApiKeyValidationData{}
	mi := &file_openai_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyValidationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyValidationData) ProtoMessage() {}

func (x *ApiKeyValidationData) ProtoReflect() protoreflect.Message {
	mi := &file_openai_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyValidationData.ProtoReflect.Descriptor instead.
func (*ApiKeyValidationData) Descriptor() ([]byte, []int) {
	return file_openai_proto_rawDescGZIP(), []int{8}
}

func (x *ApiKeyValidationData) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ApiKeyValidationData) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *ApiKeyValidationData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApiKeyValidationData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApiKeyValidationData) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_openai_proto protoreflect.FileDescriptor

const file_openai_proto_rawDesc = "" +
	"\n" +
	"\fopenai.proto\x12\x06openai\"U\n" +
	"\x11OpenAIChatMessage\x12\x12\n" +
	"\x04role\x18\x01 \x01(\tR\x04role\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\xe7\x02\n" +
	"\x11OpenAIChatRequest\x12\x14\n" +
	"\x05model\x18\x01 \x01(\tR\x05model\x125\n" +
	"\bmessages\x18\x02 \x03(\v2\x19.openai.OpenAIChatMessageR\bmessages\x12 \n" +
	"\vtemperature\x18\x03 \x01(\x01R\vtemperature\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x04 \x01(\x05R\tmaxTokens\x12\x13\n" +
	"\x05top_p\x18\x05 \x01(\x01R\x04topP\x12+\n" +
	"\x11frequency_penalty\x18\x06 \x01(\x01R\x10frequencyPenalty\x12)\n" +
	"\x10presence_penalty\x18\a \x01(\x01R\x0fpresencePenalty\x12\x12\n" +
	"\x04stop\x18\b \x03(\tR\x04stop\x12\x16\n" +
	"\x06stream\x18\t \x01(\bR\x06stream\x12\x12\n" +
	"\x04user\x18\n" +
	" \x01(\tR\x04user\x12\x17\n" +
	"\aapi_key\x18\v \x01(\tR\x06apiKey\"\x82\x01\n" +
	"\vOpenAIUsage\x12#\n" +
	"\rprompt_tokens\x18\x01 \x01(\x05R\fpromptTokens\x12+\n" +
	"\x11completion_tokens\x18\x02 \x01(\x05R\x10completionTokens\x12!\n" +
	"\ftotal_tokens\x18\x03 \x01(\x05R\vtotalTokens\"\x82\x01\n" +
	"\x10OpenAIChatChoice\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\x123\n" +
	"\amessage\x18\x02 \x01(\v2\x19.openai.OpenAIChatMessageR\amessage\x12#\n" +
	"\rfinish_reason\x18\x03 \x01(\tR\ffinishReason\"n\n" +
	"\x12OpenAIChatResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\x04data\x18\x03 \x01(\v2\x16.openai.OpenAIChatDataR\x04data\"\xc7\x01\n" +
	"\x0eOpenAIChatData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06object\x18\x02 \x01(\tR\x06object\x12\x18\n" +
	"\acreated\x18\x03 \x01(\x03R\acreated\x12\x14\n" +
	"\x05model\x18\x04 \x01(\tR\x05model\x122\n" +
	"\achoices\x18\x05 \x03(\v2\x18.openai.OpenAIChatChoiceR\achoices\x12)\n" +
	"\x05usage\x18\x06 \x01(\v2\x13.openai.OpenAIUsageR\x05usage\"0\n" +
	"\x15ValidateApiKeyRequest\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\"x\n" +
	"\x16ValidateApiKeyResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x120\n" +
	"\x04data\x18\x03 \x01(\v2\x1c.openai.ApiKeyValidationDataR\x04data\"\x93\x01\n" +
	"\x14ApiKeyValidationData\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x15\n" +
	"\x06key_id\x18\x02 \x01(\tR\x05keyId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\x03R\texpiresAt2\xa3\x01\n" +
	"\x06OpenAI\x12H\n" +
	"\x0fChatCompletions\x12\x19.openai.OpenAIChatRequest\x1a\x1a.openai.OpenAIChatResponse\x12O\n" +
	"\x0eValidateApiKey\x12\x1d.openai.ValidateApiKeyRequest\x1a\x1e.openai.ValidateApiKeyResponseB\n" +
	"Z\b./openaib\x06proto3"

var (
	file_openai_proto_rawDescOnce sync.Once
	file_openai_proto_rawDescData []byte
)

func file_openai_proto_rawDescGZIP() []byte {
	file_openai_proto_rawDescOnce.Do(func() {
		file_openai_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_openai_proto_rawDesc), len(file_openai_proto_rawDesc)))
	})
	return file_openai_proto_rawDescData
}

var file_openai_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_openai_proto_goTypes = []any{
	(*OpenAIChatMessage)(nil),      // 0: openai.OpenAIChatMessage
	(*OpenAIChatRequest)(nil),      // 1: openai.OpenAIChatRequest
	(*OpenAIUsage)(nil),            // 2: openai.OpenAIUsage
	(*OpenAIChatChoice)(nil),       // 3: openai.OpenAIChatChoice
	(*OpenAIChatResponse)(nil),     // 4: openai.OpenAIChatResponse
	(*OpenAIChatData)(nil),         // 5: openai.OpenAIChatData
	(*ValidateApiKeyRequest)(nil),  // 6: openai.ValidateApiKeyRequest
	(*ValidateApiKeyResponse)(nil), // 7: openai.ValidateApiKeyResponse
	(*ApiKeyValidationData)(nil),   // 8: openai.ApiKeyValidationData
}
var file_openai_proto_depIdxs = []int32{
	0, // 0: openai.OpenAIChatRequest.messages:type_name -> openai.OpenAIChatMessage
	0, // 1: openai.OpenAIChatChoice.message:type_name -> openai.OpenAIChatMessage
	5, // 2: openai.OpenAIChatResponse.data:type_name -> openai.OpenAIChatData
	3, // 3: openai.OpenAIChatData.choices:type_name -> openai.OpenAIChatChoice
	2, // 4: openai.OpenAIChatData.usage:type_name -> openai.OpenAIUsage
	8, // 5: openai.ValidateApiKeyResponse.data:type_name -> openai.ApiKeyValidationData
	1, // 6: openai.OpenAI.ChatCompletions:input_type -> openai.OpenAIChatRequest
	6, // 7: openai.OpenAI.ValidateApiKey:input_type -> openai.ValidateApiKeyRequest
	4, // 8: openai.OpenAI.ChatCompletions:output_type -> openai.OpenAIChatResponse
	7, // 9: openai.OpenAI.ValidateApiKey:output_type -> openai.ValidateApiKeyResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_openai_proto_init() }
func file_openai_proto_init() {
	if File_openai_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_openai_proto_rawDesc), len(file_openai_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_openai_proto_goTypes,
		DependencyIndexes: file_openai_proto_depIdxs,
		MessageInfos:      file_openai_proto_msgTypes,
	}.Build()
	File_openai_proto = out.File
	file_openai_proto_goTypes = nil
	file_openai_proto_depIdxs = nil
}
